包装对象
	String , Number ,Boolean

什么是javaScript
	javascript是一个脚本语言，做页面交互效果，也可以做后端开发。属于弱类型语言
	运行环境
		node

js基本语法
	变量
		概念，可以当作一个容器使用用来存储数据，
		定义方式
			使用var关键字定义-eg:var a =4;
		变量命名规范
			可以包含字母，数字，下划线，$,不能以数字开头
			变量名要见明知意
			驼峰命名
				大驼峰，每个单词都搜字母大写
				小驼峰，首字母小写，其他单词首字母大写
			蛇形命名
				多个单词用下划线链接，eg: name_sex
	子主题 2
		子主题 1
	子主题 3
	子主题 4
	子主题 5

数据类型
	基本数据类型
		number
			整数
			小数
		boolean
			ture
			false
		string
			引号包裹
		undefind
			定义变量为赋值
		null
			直接给null或者‘ ’
	引用数据类型
		数组
		对象
	数据类型转换
		number()
			转换成数字
				如果出现其他字符，返回NaN
		parseInt()
			转成整数
		paeseFloat()
			转换成小数
		String()
			转换成字符串
		toString()
			转换成字符串
		Boolean
			转换成布尔类型
		boolean，Numer，String，三者任意两种数据类型相加，转换优先顺序String>Number>Boolean

运算符
	算数运算符
		+
		-
		*
		/
			除
		%
			取余
		++
			如果++在前，先自身加1，再赋值
			如果++在后，先赋值，后进行自身加1
		--
	赋值运算符
		=
			把等号右边的赋值给左边
		+=
			变量自身加上右边的值
		-=
			变量自身减去右边的值
		*=
			变量自身乘上右边的值
		/=
			变量自身除以右边的值
		%=
			变量自身除以右边的值，取余数，
	比较运算符
		==
			判断相等
		===
			判断值和型全等
		!=
			判断值是否相等
		!==
			判断是否不等值，或者不等型
		>
			大于
		<
			小于
		>=
			大于等于
		<=
			小于等于
		?
			三元运算符
				布尔型表达式?当布尔类型为true返回这段结果:当布尔类型为false返回这段结果
	逻辑运算符
		&&
			两边必须都为treue，或者false
		||
			满足一个即可
		！
			逻辑非
				true为false，false为true

字符串拼接
	减法(-)、乘法(*)、除法(/)隐式转换
	将运算符两端的数据转为数值型，如果转换失败，返回
	NaN(Not a Number),不是一个数字，任何值和NaN执行
	加减乘除都会返回NaN:   自动调用了number、转换成数值型。
	字符串在前，之后的加号做拼接。

强制转换
	强制转换整数 parsInt
		常用于将字符串或者数字转为整型，其它的数据返回
	NaN,如果要转换的字符串开头是非数字，则返回NaN.
	强制转换数值型   Number();
		Number('2')	//2
	Number(true)	//1
	Number(2a)	//NaN
	Number(undefined)	//NaN
	Number(null)	//0
	转换成浮点型 parseFloat
		和整数转换一样
	.tostring(), 转换成字符行。

运算符
	表达式:由运算符连接的操作数据，所组成的形式。。
	运算符分为算术运算符、比较运算符、逻辑运算符、位运算
	符、赋值运算符、三目运算符


函数表达式
	函数表达式和函数声明的区别
函数声明可以变量提升，可以写在任意位置，
函数表达式只存在变量提升，必须声明后使用

对象
	自由主题

构造函数
	this一个函数方法，会形成闭包. 因为被返回出去了；
	
	this{
	      	1.函数预编译过程中，this指向Window
		2.全局作用域里   	this指向Window 
		3.call / apply 可以改变函数运行时this指向
		4. 在这种方法，谁调用，this指向谁
		   var obj = {
			a:function{
			    console.log(this);
			}
		      }
		obj.a(); 
	}

原型，原型链，call / apply
	--原型
	(方法名).prototype={
		公共属性；
	}    
		proto =>> 找到prototype  默认的原型 
		查看属性，一直往上找，找最近的  ；
	  
         1 原型是function的一个属性，它定义了一个构造函数对象的公共祖先，原型也是对象，
         2.利用原型的特点可以提取共有属性。
         3. 
         4.

	aeg:
		call,借用构造方法的属性；

	call 和 apply 是什么作用，改变this指向，  区别  传参列表不同，
	call 是单个传参，apply是以数组形式传参，

内置函数
	随机数  :   Math.random(  );
取整数 ：  Math.floor();
	全局函数
		encodeURL
			对 uri中的中文进行编码
		decodeURI
			对已经编码的中文进行解码
		isIfinite
			判断是不是有限值
				是为ture，不是为false
			继承模式：圣杯模式

命名空间：

对象枚举：

	for in	for(var(变量名)  in (对象名))	访问一个属性 obj.name   ——> 底层会变成  obj（['name']）
		所以遍历的时候 ，要加引号,才是访问属性,不加引号访问的是变量  **['']
	1. hasOwnProperty();	 查看属于自身设定的属性,(这里传需要查看的参数)
		
	2.in  ,   查看是否拥有某个属性， 返回true false  语法   （'属性名' in 对象）;  不加引号 是访问变量;
	
	3.instanceof    一种解释  : A对象   是不是  B构造函数构造出来的；
		      二种解释  ：看A对象的原型链上，有没有B的原型；
		      语法  A instanceof B
		eval()
			执行字符串中的表达是
				也可以当作数字转换

继承模式，命名空间，对象枚举,

arguments
	
	arguments.callee 指向函数自身引用 ；

	.caller  查看被谁调用了


try() catch(e){} --异常处理

	Error.name的六种值对应的信息:
	1.EvalError:eval() 的使用与定义不一致;
	2.RangeError : 数值越界；
	3.ReferenceError：非法或不能识别的引用数值；
	4.SyntaxError：发生语法解析错误；
	5.TypeError:操作数据类型错误；
	6.URi Error：URI 处理函数使用不当；


es5   严格模式 
	启用方法： 在逻辑最顶部添加："use strict"；
	启用es5.0  不能使用 callee ，要使用5.0 就不能用3.0；
 	     5.0不能使用：{   with(){}  ,   变量赋值前必须声明， 预编译this不再指向window 空指向，this必须被赋值，/
				不能重复参数和属性
				// with  ： 拿到括号内的作用域链最顶端的ao

函数
	函数基础
		概念
			把一段代码封装起来，起一个名字，每次想使用这段代码的时候，只需要通过名字调用
		之前接触的函数
			-alert(),isNAN(),Number()....
		定义
			function name(){
     函数体;
}
		调用
			name()
		参数
			形参
				形参就是在定义函数的时候，写在函数明后面的小括号里，用来接收数据，如果有多个参数，用逗号隔开，
			实参
				实参是在调用的时候，写在函数后面小括号内，用来给函数传递数据的，如果有多个实参，用逗号隔开
			形参和实参的赋值方式，
				从左到右依次赋值，入伙没有实参复制，那么形参的值为undefind。如果实参的数量多与形参的数量。多余的参数我们不能通过形参获取
		函数的返回值
			作用1
				关键字  ruturn
					写法    ruturn 返回值
			作用2
				结束我们的函数体return后面的语法不会被执行
					写法 return
		作用域
			变量作用域
				概念
					变量可以被访问的范围
				局部作用域
					在函数内用var声明的变量，只能在函数内部访问
				全局作用域
					在全局使用var声明的变量，在任何位置都可以访问
				不使用var声明的变量，默认是全局作用域
				变量提升
					使用var声明的变量，js在执行之前会被提升到所在作用域的最前面。
			函数提升
				js在程序执行之前，使用function声明的函数，会被提升到所在作用域的最顶端；
		函数的作用域
			概念
				函数可以被访问的范围
			访问范围
				在全局的作用域下定义的函数，任意位置都可以访问
				在函数内部定义的函数，只能在函数内部访问
		递归
			在函数内部调用自身，本身是一个死循环
			永华：结合return来结束函数的循环自我调用。
		匿名函数
			没有名字的函数
			创建函数
				函数声明
					function name(){}
				函数表达式
					var name=function(){}
				区别：函数声明存在函数提升，
函数表达式只存在变量提升，不存在函数提升
			匿名函数自调用
				目的：创建函数的作用域，防止全局污染
				(function (形参列表){

})(实参列表)
			函数回调
				将匿名函数以实参的方式传递，此时形参就是匿名函数的函数名
				function name(a){

}
 name(
     function(){

     }
)
		数组
			splice
				s.splice(1,2,)从哪个第一个开始，删除第二个
s.splice(2),只写一个参数，从坐标参数后全部删除
s.splice(0,1,"java","css")，在第零位和第一位的索引，删除增加java。css。
			concat(a,b)
				数组元素拼接
			截取s.slice
				a.slice(1,4),截取坐标1.到4，包含1不包含4，包头不包围，
可以使用负数，从后往前取值，
			s.reverse()
				数组反转,返回
					反转
			.pop()
				删除最后一个元素
			.shift()
				删除第一个元素,
			.push(value1,value2)
				在数组末尾添加元素，返回添加后的数组长度，原数组发生改变
			.unshift(value1,value2)
				在最前面添加元素
			二维数组
				每个数组中的元素还是数组
			join('-')
				把数组元素以指定符号拼接成字符串,不改变原数组,如果不指定符号,默认逗号拼接
		数组
			splice
				s.splice(1,2,)从哪个第一个开始，删除第二个
s.splice(2),只写一个参数，从坐标参数后全部删除
s.splice(0,1,"java","css")，在第零位和第一位的索引，删除增加java。css。
			concat(a,b)
				数组元素拼接
			截取s.slice
				a.slice(1,4),截取坐标1.到4，包含1不包含4，包头不包围，
可以使用负数，从后往前取值，
			s.reverse()
				数组反转,返回
					反转
			.pop()
				删除最后一个元素
			.shift()
				删除第一个元素,
			.push(value1,value2)
				在数组末尾添加元素，返回添加后的数组长度，原数组发生改变
			.unshift(value1,value2)
				在最前面添加元素
			二维数组
				每个数组中的元素还是数组
			join('-')
				把数组元素以指定符号拼接成字符串,不改变原数组,如果不指定符号,默认逗号拼接
		内置函数
			随机数  :   Math.random(  );
取整数 ：  Math.floor();
			内置构造函数
				Object
					var object= New Object()
						注意，多个属性逗号隔开，
属性和属性之间用分号隔开
				for...in..遍历
					for(var key in  对象名){
     key：就是对象中的每一个属性名；
     对象名[key]：访问每个属性值；
}
			全局函数
				encodeURL
					对 uri中的中文进行编码
				decodeURI
					对已经编码的中文进行解码
				isIfinite
					判断是不是有限值
						是为ture，不是为false
				eval()
					执行字符串中的表达是
						也可以当作数字转换
		全局函数

Dom
	Dom
		dom
			document 
				代表整个文档
			document.getElementById('')
				通过id选取元素
不区分大小写
在IE8以下name值也可以选择
			document.getElementsByTagName（‘’）[0];
				通过标签名获取元素
最常用的
			document.getElementsByname（‘’）[0];
				需要注意，只有部分标name可生效（表单，img，iframe）
			document.getElementsByClassName（‘’）[0];
				类名  ，ie8和ie9以下的版本中没有
			.querySelector
				css选择器,包括在ie7，以下的版本中没有
			.querySelectorAll
				css选择器，包括ie7，以下版本中没有
		节点
			遍历节点树
				.parentNode
					查看父节点，最顶端的parentNode是
#document
				childNodes
					子节点们
				firstChild
					第一个子节点
				lastChild
					最后一个兄弟节点
						previousSibling,前一个兄弟元素
			基于元素节点树🌲的遍历
				parentElment
					返回当前元素的父节点元素（ie不兼容）
				children
					只返回当前元素的元素子节点
				node.childElemtntCount === node.children.length
					当前元素节点的子元素
				firstElementChild
					返回的是第一个元素节点
						IE不兼容
				lastElementChild
					返回的是最后一个元素节点
				nextElementSibling/previousElementSibling
					返回后一个/前一个兄弟元素
			节点的四个属性
				nodeName
					元素的标签名，以大写的形式表示，只读
				nodevalue
					text节点或Comment节点的文本内容，可读写
				nodeType
					该节点的类型，只读
				attributes
					Element节点的属性集合
				节点的一个方法
					Node.hasChildNodes（）

转义字符
	\
	console.log('it\'s dog')

String API
	length可以获取字符串长度
	charAt()
		获取()内下标的值

unicode编码
	0
		48
	A
		65
	a
		97

查找字符串
	indexOf()
		查找某个字符串出现对应的索引
	lastIndexOf()
		从最后一个字符串查找对应的索引位置，不存在为-1

this
	this关键字
		当对象里面的方法，访问对象里的属性，需要指明属性的位置
那么this关键字就代表当前对象
所以，方法里访问对象属性的时候，this.属性名

JSON
	传输数据的格式，本质上就是对象，当用途有区别，对象就是本地用的，json是用来传输的
		JSON.parse()  括号内写变量名
string ->json
		JSON.sringify()
json ->string
